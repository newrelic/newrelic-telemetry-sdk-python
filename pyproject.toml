# Copyright 2010 New Relic, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

[tool.ruff]
output-format = "grouped"
line-length = 120
target-version = "py37"
force-exclude = true  # Fixes issue with megalinter config preventing exclusion of files
extend-exclude = [
    "setup.py",
]

[tool.ruff.format]
skip-magic-trailing-comma = true

[tool.ruff.lint]
isort.split-on-trailing-comma=false
pep8-naming.extend-ignore-names = ["X", "y"]

select = [
    # Enabled linters and rules
    "F",  # Pyflakes
    "E",  # pycodestyle
    "W",  # pycodestyle
    "I",  # isort
    "N",  # pep8-naming
    "UP",  # pyupgrade
    "YTT",  # flake8-2020
    "ASYNC",  # flake8-async
    "S",  # flake8-bandit
    "BLE",  # flake8-blind-except
    "FBT",  # flake8-boolean-trap
    "B",  # flake8-bugbear
    "A",  # flake8-builtins
    "COM",  # flake8-commas
    "C4",  # flake8-comprehensions
    "DTZ",  # flake8-datetimez
    "T10",  # flake8-debugger
    "EM",  # flake8-errmsg
    "EXE",  # flake8-executable
    "FA",  # flake8-future-annotations
    "ISC",  # flake8-implicit-str-concat
    "ICN",  # flake8-import-conventions
    "LOG",  # flake8-logging
    "G",  # flake8-logging-format
    "INP",  # flake8-no-pep420
    "PYI",  # flake8-pyi
    "PT",  # flake8-pytest-style
    "Q",  # flake8-quotes
    "RSE",  # flake8-raise
    "RET",  # flake8-return
    "SLOT",  # flake8-slots
    "SIM",  # flake8-simplify
    "TID",  # flake8-tidy-imports
    "INT",  # flake8-gettext
    "ARG",  # flake8-unused-arguments
    "PTH",  # flake8-use-pathlib
    "PGH",  # pygrep-hooks
    "PL",  # Pylint
    "TRY",  # tryceratops
    "FLY",  # flynt
    "PERF",  # Perflint
    "FURB",  # refurb
    "RUF",  # Ruff-specific rules
]

# Disabled Linters
# "ANN",  # flake8-annotations
# "D",  # pydocstyle
# "C90",  # mccabe
# "DJ",  # flake8-django
# "PIE",  # flake8-pie
# "T20",  # flake8-print
# "SLF",  # flake8-self
# "TC",  # flake8-type-checking
# "TD",  # flake8-todos
# "FIX",  # flake8-fixme
# "ERA",  # eradicate
# "PD",  # pandas-vet
# "NPY",  # NumPy-specific rules
# "FAST",  # FastAPI
# "AIR",  # Airflow

# Preview linters (disabled)
# "CPY",  # flake8-copyright
# "DOC",  # pydoclint

ignore = [
    # Permanently disabled rules
    "D203",  # incorrect-blank-line-before-class
    "D213",  # multi-line-summary-second-line
    "ARG001",  # unused-argument
    "PYI024",  # collections-named-tuple (not currently using type annotations)
    "PLR0913", # too-many-arguments
    "PLR0915",  # too-many-statements
    "E501",  # line-too-long (line length handled by formatter)
    # Ruff recommended linter rules to disable when using formatter
    "W191",  # tab-indentation
    "E111",  # indentation-with-invalid-multiple
    "E114",  # indentation-with-invalid-multiple-comment
    "E117",  # over-indented
    "D206",  # docstring-tab-indentation
    "D300",  # triple-single-quotes
    "Q000",  # bad-quotes-inline-string
    "Q001",  # bad-quotes-multiline-string
    "Q002",  # bad-quotes-docstring
    "Q003",  # avoidable-escaped-quote
    "COM812",  # missing-trailing-comma
    "COM819",  # prohibited-trailing-comma
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = [
    # Disabled rules in tests
    "S",  # flake8-bandit (security checks are not necessary in tests)
    "F401",  # unused-import
    "F811",  # redefined-while-unused (pytest fixtures trigger this)
    "E731",  # lambda-assignment (acceptable in tests)
    "PLR2004",  # magic-value-comparison (comparing to constant values)
    "ASYNC251",  # blocking-sleep-in-async-function (acceptable in tests)
    "B904",  # raise-without-from-inside-except (not necessary in tests)
    "PT006",  # pytest-parametrize-names-wrong-type (style choice)
    "PT007",  # pytest-parametrize-values-wrong-type (style choice)
    "PT011",  # pytest-raises-too-broad (we frequently test for generic errors)
    "INP001",  # implicit-namespace-package
]
